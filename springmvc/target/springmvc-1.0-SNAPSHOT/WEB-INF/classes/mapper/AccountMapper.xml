<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- namespace命名空间，作用就是对SQL进行分类化管理，理解SQL隔离。
        注意：当使用mapper代理方法开发，namespace有特殊重要的作用,需要与对应的mapper接口保持一致。  -->
<mapper namespace="com.it.mapper.AccountMapper">
    <!-- 在映射文件中配置很多SQL语句 -->
    <!-- 需求：通过id查询用户表的记录 -->
    <!-- 通过select执行数据库查询
            id:标识映射文件中的SQL，称为statement的id。
            将SQL语句封装到mappedStatement对象中，所以id称为statement的id。
            parameterType:指定输入参数的类型，这里指定int型，跟数据库保持一致。
            #{}表示一个占位符
            #{id}：其中id表示接收输入的参数，参数名称就是id，如果输入参数是简单类型，#{}中的参数名可以任意，可以value或其他名称
            resultType:指定SQL输出结果的所映射的java对象类型，select指定resultType表示将单挑记录映射成的java对象。
            -->
    <resultMap id="com.it.po.Account" type="AccountList"></resultMap>
    <select id ="findAccountById" parameterType="int" resultMap="AccountList">
                select * from account where id=#{id}
    </select>
    <select id ="findListAccount" resultType="com.it.po.Account">
                select * from account
    </select>
    <!-- 根据输入的动态信息查询数据-->
    <select id="findAccountsByMessage" parameterType="com.it.po.Account" resultType="com.it.po.Account">
        select * from Account
        <where>
            <if test="sex!=null and sex!=''">
                and account.sex=#{sex}
            </if>
            <if test="name!=null and name!=''">
                and account.name like '%${name}%'
            </if>
        </where>
    </select>
</mapper>